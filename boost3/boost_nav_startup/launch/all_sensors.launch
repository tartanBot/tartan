<?xml version="1.0"?>
<launch>

    <!-- Start joy node -->
	<arg name="joy_dev" default="/dev/input/js0" />

	<group ns="joy_teleop">

		<node pkg="joy" type="joy_node" name="joy_node" required="true">
		  <param name="dev" value="$(arg joy_dev)" />
		  <param name="deadzone" value="0.1" />
		  <param name="autorepeat_rate" value="20" />
		</node>

        <!-- Start teleop_twist_joy node -->
		<node pkg="teleop_twist_joy" name="teleop_twist_joy" type="teleop_node" required="true">
		  <rosparam command="load" file="$(find boost_config)/config/teleop.config.yaml" />
		</node>

	</group>

    <!-- Start twist_mux node -->
	<arg name="joy_vel_in"  default="input_joy/cmd_vel"/>
	<arg name="joy_vel_out" default="joy_vel"/>

	<arg name="cmd_vel_out" default="twist_mux/cmd_vel"/>

	<arg name="config_locks"  default="$(find boost_config)/config/twist_mux/twist_mux_locks.yaml"/>
	<arg name="config_topics" default="$(find boost_config)/config/twist_mux/twist_mux_topics.yaml"/>
	<!-- <arg name="config_joy" default="$(find boost_config)/config/twist_mux/joystick.yaml"/> -->

	<node pkg="twist_mux" type="twist_mux" name="twist_mux" output="screen">
		<remap from="cmd_vel_out" to="$(arg cmd_vel_out)"/>
		<rosparam file="$(arg config_locks)"  command="load"/>
		<rosparam file="$(arg config_topics)" command="load"/>
	</node>

    <!-- Launch hebi teleop node -->
	<!-- <node pkg="hebi" name="stalker_base_motor_commands" type="stalker_base_motor_commands" required="true" output="screen" >
		<param name="publish_frequency" value="50" /> 
	</node> -->

	<!-- urdf xml robot description loaded on the Parameter Server-->
		 <param name="robot_description" textfile="$(find boost_urdf)/robots/boost_stalker.urdf" />

	<!-- publish all the frames to TF -->
		<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" required="true" output="screen">

			<param name="publish_frequency" value="50"/> <!-- Hz -->
		</node>

	<!-- publish TF from camera_tof to the 3vistor joint in urdf -->
		<node pkg="tf" type="static_transform_publisher" name="tof_tf_static_broadcaster" args="0 0 0 3.14159 -1.570795 0 tvistor_link camera_tof 100" />

	<!-- publish TF from laser link to front_camera -->
		<node pkg="tf" type="static_transform_publisher" name="lrf_tf_static_broadcaster" args="-0.046 0.114 0 0 0 -1.570795 front_camera_link sick_561_laser 100" />

	<!-- publish TF from imu_link to base_link -->
		<node pkg="tf" type="static_transform_publisher" name="imu_tf_static_broadcaster" args="-0.475 0.038 0.2617 3.14159 3.14159 0 base_link imu_link 100" />

	<!-- publish TF from mti_imu_link to base_link -->
		<node pkg="tf" type="static_transform_publisher" name="mti_imu_tf_static_broadcaster" args="0.0889 0 0.914 0 0 0 base_link mti_imu_link 100" />


	<!-- publish TF from quanergySensor to base_link -->
		<node pkg="tf" type="static_transform_publisher" name="quanergy_tf_static_broadcaster" args="0.15 0 1.65 0 0.58 0 base_link quanergySensor 100" />

    <!-- Start boost_odom publisher -->
	<node pkg="boost_odom" name="boost_odom_pub" type="boost_odom_pub" required="false" output="screen"/>

    <!-- Start nmea_navsat_driver, see http://wiki.ros.org/nmea_navsat_driver -->
	<node pkg="nmea_navsat_driver" name="nmea_serial_driver" type="nmea_serial_driver" required="false" output="screen" >
		<param name="port" value="/dev/gps_usb_serial" />
		<param name="baud" value="115200" />
		<param name="frame_id" value="GPS_link" />
		<param name="useRMC" value="False" />
		<!-- <remap from="fix" to="gps/fix" /> -->
	</node>

    <!-- Launch gps_common utm_odometry_node, which will output GPS fix in UTM coordinate frame -->
	<node pkg="gps_common" type="utm_odometry_node" name="utm_odometry_node" required="true" output="screen" >
		<param name="child_frame_id" value="GPS_link" />
		<remap from="odom" to="odometry/utm"/>
	</node>

    <!-- Configure Xsens IMU -->
	<node pkg="xsens_driver" type="mtnode.py" name="mtnode" respawn="true" output="screen" >
		<param name="device" value="/dev/xsens" />
		<param name="baudrate" value="115200" />
		<param name="frame_id" value="mti_imu_link" />
		<param name="frame_local" value="ENU" />
		<param name="frame_local_imu" value="ENU" />
	</node>


    <!--Configure and launch client for quanergy-->
    <include file="$(find quanergy_client_ros)/launch/client.launch" />
    <!--Configure and launch client for stereo-->
	  <arg name="ip_address" default="192.168.1.9" />
	  <arg name="namespace"  default="multisense" />
	  <arg name="mtu"        default="7200" />
	  <arg name="sensor"     default="S7" />
	  <arg name="launch_robot_state_publisher" default="true" />

	  <!-- Robot state publisher -->
	  <group if = "$(arg launch_robot_state_publisher)">
	    <param name="robot_description"
		  command="$(find xacro)/xacro.py '$(find multisense_description)/urdf/multisense$(arg sensor)/standalone.urdf.xacro' name:=$(arg namespace)"/>
	    <node pkg="robot_state_publisher" type="state_publisher" name="$(arg namespace)_state_publisher">
	      <param name="publish_frequency" type="double" value="50.0" />
	      <remap from="joint_states" to="/$(arg namespace)/joint_states" />
	    </node>
	  </group>

	  <!-- ROS Driver -->
	   <node pkg="multisense_ros" ns="$(arg namespace)" type="ros_driver" name="$(arg namespace)_driver" output="screen">
	     <param name="sensor_ip"   value="$(arg ip_address)" />
	     <param name="sensor_mtu"  value="$(arg mtu)" />
	     <param name="tf_prefix"  value="$(arg namespace)" />
	  </node>

	  <!-- Color Laser PointCloud Publisher -->
	   <node pkg="multisense_ros" ns="$(arg namespace)" type="color_laser_publisher" name="$(arg namespace)_color_laser_publisher" output="screen">
	      <remap from="image_rect_color" to="/$(arg namespace)/left/image_rect_color" />
	      <remap from="lidar_points2" to="/$(arg namespace)/lidar_points2" />
	      <remap from="camera_info" to="/$(arg namespace)/left/image_rect_color/camera_info" />
	  </node>

	  <include file="$(find sick_3vistort_driver)/launch/sick_3vistort_driver.launch" />
</launch>
